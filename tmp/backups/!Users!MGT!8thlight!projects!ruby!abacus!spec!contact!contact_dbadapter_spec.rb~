require 'contact/contact_dbadapter'
require 'spec_helper'

describe DBAdapter::Contact do

  before do
    @db_adapter = DBAdapter::Contact.new
  end

  describe "#create" do
    it "creates a new active record model" do
      @db_adapter.create({}).class.should == AR::Contact
    end

    it "creates a new active record model with attributes" do
      @db_adapter.create(:name=>"Test").name.should == "Test"
    end

    it "throws an exception if not found" do
      lambda{ @db_adapter.create(:foo) }.should raise_exception
    end
  end

  describe "#find" do
    it "finds an active record model by id" do
      contact = @db_adapter.create :name => "my name"
      contact.save!
      @db_adapter.find(contact.id).should == contact
    end

    it "throws an exception if not found" do
      lambda{ @db_adapter.find(:fizz,:foo) }.should raise_exception
    end
  end

 describe "#find_all" do
    it "finds all active record models" do
      contacts = [AR::Contact.new, AR::Contact.new, AR::Contact.new]
      AR::Contact.stub(:all).and_return(contacts)
      @db_adapter.find_all.should == contacts
    end

    it "throws an exception if not found" do
      lambda{ @db_adapter.find_all(:foo) }.should raise_exception
    end
  end

  describe "#update" do
    it "it updates a record" do
      contact = @db_adapter.create({:name=>"abc123"})
      contact.save!

      retrieved = @db_adapter.find(contact.id)
      retrieved.name.should eq("abc123")

      contact.name = "abc456"
      contact.save!

      retrieved = @db_adapter.find(contact.id)
      retrieved.name.should eq("abc456")
    end
  end

end
