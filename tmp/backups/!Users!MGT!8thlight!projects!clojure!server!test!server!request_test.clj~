(ns server.request-test
  (:use [server.request.parse] server.core)
  (:use [clojure.test]))

(do (deftest test-parse-request-line-1
  (is (= (parse-request-line "GET / HTTP/1.1")
         {:method :GET
          :request-uri "/"
          :http-version "HTTP/1.1"})))

(deftest test-parse-request-line-2
  (is (= (parse-request-line "POST /foo HTTP/1.1")
         {:method :POST
          :request-uri "/foo"
          :http-version "HTTP/1.1"})))

(deftest test-parse-request-line-3
  (is (= (parse-request-line "PUT /foo/bar?baz=1 HTTP/1.1")
         {:method :PUT
          :request-uri "/foo/bar?baz=1"
          :http-version "HTTP/1.1"}))))

(deftest test-parse-headers-1
  (is (= (parse-headers ["Host: localhost:3000"])
         {:Host "localhost:3000"})))


(deftest test-parse-headers-2
  (is (=  (parse-headers ["Host: localhost:3000" "Connection: keep-alive" "Accept-Encoding: gzip,deflate,sdch"])
          {:Host "localhost:3000", :Connection "keep-alive", :Accept-Encoding "gzip,deflate,sdch"})))

(deftest test-parse-headers-3
  (is (= (parse-headers ["Host: localhost:3000" "Connection: keep-alive" "Accept-Encoding: gzip,deflate,sdch", "invalid header"])
         {:Host "localhost:3000", :Connection "keep-alive", :Accept-Encoding "gzip,deflate,sdch"})))

(deftest parse-k-v-pairs-1
  (let [kv-string "a=1&b=2"]
    (is (= {:a "1", :b "2"}
           (parse-k-v-pairs kv-string)))))

(deftest parse-k-v-pairs-2
  (let [kv-string "a=1&b=2&"]
    (is (= {:a "1", :b "2"}
           (parse-k-v-pairs kv-string)))))

(deftest parse-k-v-pairs-3
  (let [kv-string ""]
    (is (= {}
           (parse-k-v-pairs kv-string)))))

(deftest parse-k-v-pairs-4
  (let [kv-string "a=1&b=2&c=&d=4"]
    (is (= {:a "1", :b "2", :d "4"}
           (parse-k-v-pairs kv-string)))))

(deftest test-match-uri-against-pseudopattern-1
  (let [pseudopattern "/:a"
        uri "/hello"]
    (is (= {:a "hello"}
           (match-uri-against-pseudopattern pseudopattern uri)))))

(deftest test-match-uri-against-pseudopattern-2
  (let [pseudopattern "/:p1/test/:p2"
        uri "/abc/test/xyz"]
    (is (= {:p1 "abc", :p2 "xyz"}
           (match-uri-against-pseudopattern pseudopattern uri)))))

(deftest test-match-uri-against-pseudopattern-3
  (let [pseudopattern "/:a/123"
        uri "/123"]
    (is (= {} (match-uri-against-pseudopattern pseudopattern uri)))))

(deftest test-match-uri-against-pseudopattern-4
  (let [pseudopattern "/nopattern"
        uri "/nopattern"]
    (is (= {} (match-uri-against-pseudopattern pseudopattern uri)))))

(deftest test-parse-params
  (let [body "a=1&b=2"
        request-uri "/3"
        pseudopattern "/:c"]
    (is (= {:a "1", :b "2", :c "3"}
           (parse-params body pseudopattern request-uri)))))

(deftest parse-request-test
  (is (= (parse-request "/xyz/:number"
                        ["GET /xyz/3 HTTP/1.1"
                         "Host: localhost:3000"
                         "Connection: keep-alive"
                         crlf])
         {:request-line {:method :GET
                         :request-uri "/xyz/3"
                         :http-version "HTTP/1.1"}
          :headers {:Host "localhost:3000"
                    :Connection "keep-alive"}
          :params {:number "3"}})))
