require 'project/project_dbadapter'
require 'project/memory/project'
require 'project_note/project_note_dbadapter'
require 'spec_helper'

describe DBAdapter::Project do

  before do
    @db_adapter = DBAdapter::Project.new
  end

  describe "#create" do

    it "creates a new active record model" do
      @db_adapter.create({}).class.should == AR::Project
    end

    it "creates a new active record model with attributes" do
      @db_adapter.create(:name=>"Test").name.should == "Test"
    end

    it "creates a new memory model" do
      @db_adapter.create({},:Memory).class.should == ProjectPersistor::Project
    end

    it "creates a new memory model with attributes" do
      @db_adapter.create({:name=>"Test"},:Memory).name.should == "Test"
    end

    it "throws an exception if not found" do
      lambda{ @db_adapter.create(:foo) }.should raise_exception
    end

  end

  describe "#find" do

    it "finds an active record model by id" do
      project = AR::Project.create({:name => "my name"})
      @db_adapter.find(project.id).should == project
    end

    it "throws an exception if not found" do
      lambda{ @db_adapter.find(:fizz,:foo) }.should raise_exception
    end

  end

  describe "#find_all" do

    it "finds all active record models" do
      projects = [ProjectPersistor::Project.new, ProjectPersistor::Project.new, ProjectPersistor::Project.new]
      AR::Project.stub(:all).and_return(projects)
      @db_adapter.find_all.should == projects
    end

    it "throws an exception if not found" do
      lambda{ @db_adapter.find_all(:foo) }.should raise_exception
    end

  end

  describe "#update" do

    it "it updates a record" do
      project = @db_adapter.create({:name=>"abc123"})
      project.save!

      retrieved = @db_adapter.find(project.id)
      retrieved.name.should eq("abc123")

      project.name = "abc456"
      project.save!

      retrieved = @db_adapter.find(project.id)
      retrieved.name.should eq("abc456")
    end

  end

end
