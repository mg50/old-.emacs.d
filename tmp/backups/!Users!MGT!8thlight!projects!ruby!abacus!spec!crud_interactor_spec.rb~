require 'crud_interactor'

describe Lib::CrudInteractor do

  let(:id) { 1 }
  let(:attributes) { {:name => 'xyz'} }
  let(:callback) { mock }

  before do
    @db_adapter = mock
    @instance = mock
    @interactor = Lib::CrudInteractor.new(@db_adapter)
  end

  describe "#create" do
    it "creates and saves new object with specified attributes" do
      @db_adapter.should_receive(:create).and_return(@instance)
      @instance.should_receive(:save!)
      @interactor.create(attributes, lambda {|attributes|})
    end

    it "invokes a callback function" do
      @db_adapter.should_receive(:create).and_return(@instance)
      @instance.should_receive(:save!)

      callback.should_receive(:call)

      @interactor.create(attributes, callback)
    end
  end

  describe "#find" do
    it "calls find to retrieve the instance" do
      @db_adapter.should_receive(:find).with(id).and_return(@instance)
      @interactor.find(id, lambda {|object|})
    end

    it "invokes the callback" do
      @db_adapter.should_receive(:find).with(id).and_return(@instance)

      callback.should_receive(:call)
      
      @interactor.find(id, callback)
    end
  end
 
  describe "#find_all" do
    it "calls find_all to retrieve the instances" do
      @db_adapter.should_receive(:find_all).and_return([@instance])
      @interactor.find_all(lambda {|instances|})
    end
    
    it "invokes the callback" do
      @db_adapter.should_receive(:find_all).and_return([@instance])

      callback.should_receive(:call)
      
      @interactor.find_all(callback)
    end
  end

  describe "#update" do
    it "calls update correctly" do
      @db_adapter.should_receive(:update).with(id, attributes)
      callback.should_receive(:call)

      @interactor.update(id, attributes, callback)
    end
  end

end
