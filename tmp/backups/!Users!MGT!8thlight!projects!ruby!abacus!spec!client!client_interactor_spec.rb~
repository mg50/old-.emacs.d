require 'client/memory/client'
require 'client/client_interactor'

describe Interactor::Client do

  before do
    @interactor = Interactor::Client.new
  end

  describe "#create" do

    before do
      @test_client = ClientPersistor::Client.new
      @test_client2 = ClientPersistor::Client.new :name => "Test"
      @attributes = {:name => "test"}
    end

   it "creates a client and invokes callback function (1)" do
      DBAdapter::Client::Singleton.stub(:create).and_return(@test_client)

      client = nil
      callback_fn = lambda { |p| client = p }

      result = @interactor.create(@attributes, callback_fn)
      client.should == @test_client
    end

   it "creates a client and invokes callback function (2)" do
      DBAdapter::Client::Singleton.stub(:create).and_return(@test_client2)

      client = nil
      callback_fn = lambda { |p| client = p }

      result = @interactor.create({:name => "Test"}, callback_fn)
      client.should == @test_client2
    end
  end


  describe "#find methods" do

    before do
      @test_client = ClientPersistor::Client.new({:id => 1})
      @test_client2 = ClientPersistor::Client.new({:id => 2})
    end

    it "calls the find function to find the instance" do
      DBAdapter::Client::Singleton.should_receive(:find).with(@test_client.id)

      @interactor.find(@test_client.id, lambda {|instance|})
    end

    it "find invokes the callback function" do
      DBAdapter::Client::Singleton.stub(:find).and_return(@test_client)

      client = nil
      callback_fn = lambda { |p| client = p }

      result = @interactor.find(@test_client.id, callback_fn)
      client.should == @test_client
    end

    it "find invokes the callback function (2)" do
      DBAdapter::Client::Singleton.stub(:find).and_return(@test_client2)

      client = nil
      callback_fn = lambda { |p| client = p }

      result = @interactor.find(@test_client2.id, callback_fn)
      client.should == @test_client2
    end

    it "calls the find_all function to find all of the instances and passes them into the callback" do
      @test_client.save
      @test_client2.save
      DBAdapter::Client::Singleton.should_receive(:find_all).and_return([@test_client, @test_client2])

      result = nil
      @interactor.find_all(lambda {|p| result = p})

      result.should == [@test_client, @test_client2]
    end

    it "finds a client with associated contacts" do
      DBAdapter::Client::Singleton.stub(:find_with_contacts).and_return(@test_client)
      DBAdapter::Client::Singleton.should_receive(:find_with_contacts).with(@test_client.id)

      client = nil
      @interactor.find_with_contacts(@test_client.id, lambda {|p| client = p})

      client.should == @test_client
    end
  end

  describe "#update" do

    it "updates a client" do
      test_client = ClientPersistor::Client.new({ :id => 1, :name => "zzz" })
      DBAdapter::Client::Singleton.should_receive(:update).and_return(test_client)
      @interactor.update(test_client.id, test_client, lambda { |instance| })
    end

    it "update invokes the callback function" do
      test_client = ClientPersistor::Client.new({ :id => 1, :name => "aaa" })
      attributes = {:name => "zzz"}
      DBAdapter::Client::Singleton.stub(:update).and_return(test_client)

      result = nil
      @interactor.update(test_client.id, attributes, lambda { |p| result = p })

      result.name.should == "aaa"
    end

  end

end
