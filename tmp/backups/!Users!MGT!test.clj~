(defn printall [vec]
  (loop [current vec]
    (when (> (count current) 0)
      (print (first current))
      (recur (rest current)))))


(defmacro perform [& x]
  (let [[pen last] (vec (take-last 2 x))]
    (if (and (= pen :where) (vector? last))
      `(let ~last ~@(drop-last 2 x))
      `(do ~@x))))

(defn isprime [n]
  (if (some #(if (mod n %) true false) (range 2 (Math/sqrt n)))
    false
    true))

(print isprime 5)
;(print (take 10 (filter isprime (iterate inc 2))))
