describe("Abacus.Views.ProjectCreate", function() {
  beforeEach(function() {
    loadFixtures('../../../app/views/projects/_project_new.html.erb',
                 '_modal.html');
   
    this.project = new Abacus.Models.Project(); 
    Abacus.Models.Project.prototype.getClientList = function() {
      return [
        {id: 1, name: 'Client One'},
        {id: 2, name: 'Client Two'}
      ];
    };
    this.view = new Abacus.Views.ProjectCreate({model: this.project});
  });

  describe("events", function() {
    it("click submit runs add", function() {
      this.AddProjectStub = sinon.stub(this.view, 'addProject');
      this.view.render();

      this.view.$('.submit').trigger('click'); 
      expect(this.AddProjectStub).toHaveBeenCalled();
    });

    it("click cancel runs close", function() {
      this.CloseStub = sinon.stub(this.view, 'close');
      this.view.render();

      this.view.$('.cancel').trigger('click');
      expect(this.CloseStub).toHaveBeenCalled();
    });
  });

  describe("add project", function() {
    it("gets attributes from DOM", function() {
      this.view.render();
      $('[name="client_id"]').val('2')
      $('input[name="name"]').val('xyz');

      var attributes = this.view.getAttributes();

      expect(attributes.client_id).toEqual('2');
      expect(attributes.name).toEqual('xyz');
      expect(attributes.status).toEqual('Prospect');
    });

    it("adds a new project", function() {
      var collection = new Abacus.Collections.Projects();

      var CollectionCreateStub = sinon.stub(collection, 'create');

      var attributes = {
        client_id: 2,
        name: 'zzz',
        status: 'Lead'
      };

      var GetAttributesStub = sinon.stub(this.view, 'getAttributes').returns(attributes);
      this.view.render();

      this.view.addProject();

      expect(CollectionCreateStub).toHaveBeenCalledWith(attributes);
    });
  });
});
