require 'spec_helper'
require "artisan/memory/project"
require "artisan/stories/stories_interactor"
require "mocks/mock_collection"

describe Api::StoriesController do

  describe "Invalid API Key" do

    describe "JSON" do
       it "returns an error for an invalid key" do
         get :index, :key => "INVALID", :format => "json"
         response.body.should == '{"Error":"Key Not Found"}'
       end
    end

    describe "XML" do
       it "returns an error for an invalid key" do
         get :index, :key => "INVALID", :format => "xml"
         response.body.include?('Key Not Found').should be_true
       end
    end
  end

  context "#index, #backlog" do

    before(:each) do
      @stories = MockCollection.new
      @project = Memory::Project.new(:name => "A", :description => "Hello World", :api_key => "abc", :stories => @stories)
      Project.stub!(:find_by_api_key).and_return(@project)
    end

     describe "JSON" do
       it "return all project stories" do
         @stories.should_receive(:to_json).with(:only => [:name, :number, :optimistic, :realistic, :pessimistic, :acceptance_criteria]).and_return("test")
         get :index, :key => @project.api_key, :format => "json"
         response.body.should == "test"
       end
     end

     describe "XML" do
       it "returns all project stories" do
         @stories.should_receive(:to_xml).with(:only => [:name, :number, :optimistic, :realistic, :pessimistic, :acceptance_criteria]).and_return("test")
         
         get :index, :key => @project.api_key, :format => "xml"
         response.body.should == "test"
       end
     end
  end

  context "#backlog" do

    
    before(:each) do
      @backlog = MockCollection.new
      @project = Memory::Project.new(:name => "A", :description => "Hello World", :api_key => "abc")
      Project.stub!(:find_by_api_key).and_return(@project)
      Artisan::Stories::StoriesInteractor.stub!(:new).and_return(mock(Artisan::Stories::StoriesInteractor, :backlog => @backlog))
      @stories = MockCollection.new
      @backlog.stub!(:stories).and_return(@stories)
    end
    
    describe "JSON" do
      it "return all project backlog stories" do
       @stories.should_receive(:to_json).with(:only => [:name, :number, :optimistic, :realistic, :pessimistic, :acceptance_criteria]).and_return("test")
       get :backlog, :key => @project.api_key, :format => "json"
       response.body.should == "test"
      end
    end

    describe "XML" do
      it "returns all project backlog stories" do
        @stories.should_receive(:to_xml).with(:only => [:name, :number, :optimistic, :realistic, :pessimistic, :acceptance_criteria]).and_return("test")

        get :backlog, :key => @project.api_key, :format => "xml"
        response.body.should == "test"
      end
     end
  end
end
