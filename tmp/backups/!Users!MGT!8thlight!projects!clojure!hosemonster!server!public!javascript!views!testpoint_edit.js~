namespace('Hosemonster.Views', {
    TestPointEdit: Hosemonster.Views.Base.extend({
        template: 'testpoint_edit',
        tagName: 'table',
        className: 'testpoint_edit',

        events: {
            'click .save': 'save',
            'click .add-stream': 'addStreamClickHandler'
        },

        childViews: [],

        renderChildView: function() {

        },

        renderAndAppendStreamView: function(stream) {
            var streamView = new Hosemonster.Views.StreamEdit({model: stream})
            this.childViews.push(streamView);
            streamView.render();
            this.$el.find('.streams-container').append(streamView.$el);
        },

        renderChildViews: function() {
            var self = this;
            this.childViews = [];
            this.$el.find('.streams-container').html('');
            _.each(this.model.get('streams').models, function(stream) {
                self.renderAndAppendStreamView(stream);
            })
         },

        attributeNames: ['speed', 'discharge-pressure', 'suction-pressure', 'volts1', 'volts2', 'volts3', 'amps1', 'amps2', 'amps3'],

        readAttributes: function() {
            var model = this.model;
            var self = this;
            _.each(this.attributeNames, function(name) {
                var el = self.$el.find("[name=" + name + "]");
                var name = el.attr('name');
                var val = el.val();

                model.set(name, val);
            });
        },

        readStreamsAttributes: function() {
            _.each(this.childViews, function(view) {
                if(view.$el) view.readAttributes();
                else view.model.destroy();
            });
        },

        save: function() {
            this.destroyMarkedStreams();
            this.readAttributes();
            this.readStreamsAttributes();
            this.model.save();
            this.switchToDetailView();
        },

        destroyMarkedStreams: function() {
            var self = this;
            _.each(this.model.get('streams').models, function(model) {
                if(model.toDestroy) {
                    self.model.get('streams').remove(model);
                    model.destroy();
                }
            });
        },

        unmarkStreamsForDestruction: function() {
            _.each(this.model.streams.models, function(model) {
                model.toDestroy = false;
            });
        },

        switchToDetailView: function() {
            this.switchToView(Hosemonster.Views.TestPointDisplay);
            _.each(this.model.get('streams').models, function(model) {
                model.toDestroy = false;
            })
        },

        addStreamClickHandler: function(ev) {
            ev.preventDefault();
            ev.stopPropagation();
            this.addStream();
        },

        addStream: function() {
            var stream = new Hosemonster.Models.Stream();
            this.model.get('streams').add(stream);
            this.renderAndAppendStreamView(stream);
        }
    })
})
