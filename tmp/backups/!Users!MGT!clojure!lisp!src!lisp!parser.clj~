(ns lisp.parser)

(defn throw-error [msg])


(defn append-in [coll x depth]
  (cond
   (nil? coll) [x])
   (zero? depth) (concat coll [x])
   :else (concat (butlast coll)
                 [(append-in (last coll) x (dec depth))]))


(defn parse [tokens]
  (loop [parsed nil
         stack-depth 0]
    (let [current-token (first token)
          rest-tokens (rest tokens)]
      (if (nil? current-token)
        parsed
        (do
          (when (< 0 stack-depth)
            (throw-error "Unexpected ("))
          (cond
           (= "(" current-token) (recur (append-in [] stack-depth) (inc stack-depth))
           (= ")" current-token) (recur parsed (dec stack-depth))
           (re-find #"^\d+" current-token) (recur
                                            (append-in parsed (Integer/parseInt current-token) stack-depth)
                                            stack-depth)))))))

(defn parse [tokens]
  (let [token (first tokens)
        parsed-token (cond
                      (= token "(") :blah
                      (re-find #"^\d+$" token) (Integer/parseInt token)
                      :else (symbol token)
                      )]))
