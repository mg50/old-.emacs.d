(ns lisp.env
  (:refer-clojure :exclude [set get]))

(defrecord Env [table params parent])

(defn create
  ([params parent]
     (create {} params parent))
  ([table-hash params parent]
     (Env. (atom table-hash) params parent)))

(defn lookup [env sym]
  (let [table @(:table env)]
    (cond
     (contains? table sym) env
     (:parent env) (recur (:parent env) sym)
     :else env)))

(defn define [env sym val]
  (swap! (:table env) assoc sym val))

(defn set [env sym val]
  (let [the-env (lookup env sym)]
    (define the-env sym val)))

(defn get [env sym]
  (let [the-env (lookup env sym)]
    (@(:table the-env) sym)))

(defn bind-params [env param-vals]
  (let [pairs (->> param-vals
                   (interleave (:params env))
                   (partition 2)
                   (map vec)
                   (apply merge {}))
        table (apply merge @(:table env) pairs)]
    (create table [] (:parent env))))

(defn bind-syms [env bindings]
  (let [table @(:table env)]
    (if )))
