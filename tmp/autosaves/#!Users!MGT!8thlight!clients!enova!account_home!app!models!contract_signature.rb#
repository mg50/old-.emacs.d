class ContractSignature
  extend ActiveModel::Naming
  include ActiveModel::Validations
  include ActiveModel::Conversion

  def persisted?
    false
  end

  attr_accessor :ssn_last4, :first_name, :last_name, :ssn
  attr_accessor :account, :repayment_method

  validates_presence_of :first_name, :last_name, :ssn, :ssn_last4
  validates :ssn_last4, :format => { :with => /\A^\d{4}$\z/ }
  validates :ssn, :format => { :with => /\A^\d{9}$\z/ }
  
  def initialize(params={})
    @repayment_method = params[:repayment_method]
    @ssn_last4        = normalize_number(params[:ssn_last4])
    @first_name       = params[:first_name]
    @last_name        = params[:last_name]
    @ssn              = normalize_number(params[:ssn])
    @account          = params[:account]
  end

  def matches_identity_values
    error_count = errors.size
    unless account.social_security_number == ssn
      errors.add(:ssn, "does not match record on file.")
    end

    matches_ssn_last_4

    unless account.first_name.capitalize == first_name.strip.capitalize
      errors.add(:first_name, "does not match record on file.")
    end

    unless account.last_name.capitalize == last_name.strip.capitalize
      errors.add(:last_name, "does not match record on file.")
    end

    error_count == errors.size
  end

  private

  def matches_ssn_last_4
    return if account.social_security_number[5..9] == ssn_last4
    errors.add(:ssn_last4, "does not match record on file.")
  end

  def normalize_number(number)
    number && number.gsub(/\D/, '')
  end
end
